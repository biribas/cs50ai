import os
import random
import re
import sys

DAMPING = 0.85
SAMPLES = 10000
TOLERANCE = 0.001


def main():
    if len(sys.argv) != 2:
        sys.exit("Usage: python pagerank.py corpus")
    corpus = crawl(sys.argv[1])

    ranks = sample_pagerank(corpus, DAMPING, SAMPLES)
    print(f"PageRank Results from Sampling (n = {SAMPLES})")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")

    ranks = iterate_pagerank(corpus, DAMPING)
    print(f"PageRank Results from Iteration")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")


def crawl(directory):
    """
    Parse a directory of HTML pages and check for links to other pages.
    Return a dictionary where each key is a page, and values are
    a list of all other pages in the corpus that are linked to by the page.
    """
    pages = dict()

    # Extract all links from HTML files
    for filename in os.listdir(directory):
        if not filename.endswith(".html"):
            continue
        with open(os.path.join(directory, filename)) as f:
            contents = f.read()
            links = re.findall(r"<a\s+(?:[^>]*?)href=\"([^\"]*)\"", contents)
            pages[filename] = set(links) - {filename}

    # Only include links to other pages in the corpus
    for filename in pages:
        pages[filename] = set(link for link in pages[filename] if link in pages)

    return pages


def transition_model(corpus, page, damping_factor):
    """
    Return a probability distribution over which page to visit next,
    given a current page.

    With probability `damping_factor`, choose a link at random
    linked to by `page`. With probability `1 - damping_factor`, choose
    a link at random chosen from all pages in the corpus.
    """
    # Page has no outgoing links
    if not corpus[page]:
        probability = 1 / len(corpus)
        return {filename: probability for filename in corpus}

    distribution = dict()
    for filename in corpus:
        probability = (1 - damping_factor) / len(corpus)
        if filename in corpus[page]:
            probability += damping_factor / len(corpus[page])
        distribution[filename] = probability

    return distribution


def sample_pagerank(corpus, damping_factor, n):
    """
    Return PageRank values for each page by sampling `n` pages
    according to transition model, starting with a page at random.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    # Calculate transition model in advance for each page
    pages = list(corpus.keys())
    distribution = {
        page: list(transition_model(corpus, page, damping_factor).values())
        for page in pages
    }
    # Dict of estimated PageRank. Initially all pages have ranking zero
    page_rank = {page: 0 for page in pages}
    # The first sample is generated by choosing from a page at random.
    current_page = random.choice(pages)
    # Increment the count for the first sampled page
    page_rank[current_page] += 1

    # Create a Markov chain by sampling pages according to the transition model
    for _ in range(1, n):
        current_page = random.choices(pages, weights=distribution[current_page])[0]
        page_rank[current_page] += 1

    # Calculate estimated PageRank
    for page in page_rank:
        page_rank[page] /= n

    return page_rank


def iterate_pagerank(corpus, damping_factor):
    """
    Return PageRank values for each page by iteratively updating
    PageRank values until convergence.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    # The initial probability for each page
    initial_probability = 1 / len(corpus)
    # Initialize the PageRank of each page with the initial probability
    page_rank = {page: initial_probability for page in corpus}

    while True:
        new_page_rank = dict()
        for page in corpus:
            sum = 0
            for possible_parent in corpus:
                # Check if the possible parent has a link to the current page
                if page in corpus[possible_parent]:
                    sum += page_rank[possible_parent] / len(corpus[possible_parent])
                # If the possible parent has no links, treat it as having one link to every page in the corpus (including itself)
                elif not corpus[possible_parent]:
                    sum += page_rank[possible_parent] / len(corpus)

            # Recursive mathematical expression to calculate the new PageRank
            new_page_rank[page] = (1 - damping_factor) / len(corpus) + damping_factor * sum

        # Check if the difference between the previous PageRank and the new one is less than the specified tolerance
        converged = all(abs(page_rank[page] - new_page_rank[page]) < TOLERANCE for page in corpus)
        # Update the PageRank with the newly calculated values
        page_rank = new_page_rank

        # If converged, break the loop
        if converged:
            break

    return page_rank


if __name__ == "__main__":
    main()
